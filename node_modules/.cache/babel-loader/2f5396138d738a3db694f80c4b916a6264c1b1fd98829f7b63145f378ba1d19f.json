{"ast":null,"code":"var _jsxFileName = \"C:\\\\0-Projects\\\\Test\\\\WebAR\\\\WebAR_frontend\\\\src\\\\component\\\\Backpack.js\",\n  _s = $RefreshSig$();\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { TextureLoader } from \"three\";\nimport { useLoader } from \"@react-three/fiber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Backpack = ({\n  bodyColor,\n  material,\n  metalColor\n}) => {\n  _s();\n  const glb = useLoader(GLTFLoader, \"/models/backpack.glb\");\n  const baseColor = useLoader(TextureLoader, `/textures/${material}_baseColor.jpg`);\n  const normalMap = useLoader(TextureLoader, `/textures/${material}_normal.jpg`);\n  const roughnessMap = useLoader(TextureLoader, `/textures/${material}_occlusionRoughnessMetallic.jpg`);\n  const metalTextureColor = useLoader(TextureLoader, metalColor);\n  const metalRoughnessMap = useLoader(TextureLoader, `/textures/metall_occlusionRoughnessMetallic.jpg`);\n  const strapBaseColor = useLoader(TextureLoader, `/textures/strap_baseColor.jpg`);\n  const strapNormalMap = useLoader(TextureLoader, `/textures/strap_normal.jpg`);\n  const strapRoughnessMap = useLoader(TextureLoader, `/textures/strap_occlusionRoughnessMetallic.jpg`);\n  console.log(\"glb === \", glb);\n  glb.scene.traverse(child => {\n    console.log(\"child === \", child.material);\n    if (child.isMesh) {\n      child.material.map = baseColor;\n      child.material.normalMap = normalMap;\n      child.material.roughnessMap = roughnessMap;\n      if (child.material.name === \"metall\") {\n        child.material.map = metalTextureColor;\n        child.material.roughnessMap = metalRoughnessMap;\n      }\n      if (child.material.name === \"strap\") {\n        child.material.map = strapBaseColor;\n        child.material.normalMap = strapNormalMap;\n        child.material.roughnessMap = strapRoughnessMap;\n      }\n      child.material.needsUpdate = true;\n    }\n  });\n  glb.materials.body.color.set(bodyColor);\n  glb.materials.strap.color.set(bodyColor);\n  glb.scene.position.set(0, 0, 0);\n  glb.scene.scale.set(5, 5, 5);\n  return /*#__PURE__*/_jsxDEV(\"primitive\", {\n    object: glb.scene,\n    dispose: null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Backpack, \"cIdiLANEcs7ptvCqdmeis4FRtTo=\", false, function () {\n  return [useLoader, useLoader, useLoader, useLoader, useLoader, useLoader, useLoader, useLoader, useLoader];\n});\n_c = Backpack;\nexport default Backpack;\nvar _c;\n$RefreshReg$(_c, \"Backpack\");","map":{"version":3,"names":["GLTFLoader","TextureLoader","useLoader","jsxDEV","_jsxDEV","Backpack","bodyColor","material","metalColor","_s","glb","baseColor","normalMap","roughnessMap","metalTextureColor","metalRoughnessMap","strapBaseColor","strapNormalMap","strapRoughnessMap","console","log","scene","traverse","child","isMesh","map","name","needsUpdate","materials","body","color","set","strap","position","scale","object","dispose","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/0-Projects/Test/WebAR/WebAR_frontend/src/component/Backpack.js"],"sourcesContent":["import { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { TextureLoader } from \"three\";\nimport { useLoader } from \"@react-three/fiber\";\n\nconst Backpack = ({ bodyColor, material, metalColor }) => {\n  const glb = useLoader(GLTFLoader, \"/models/backpack.glb\");\n  const baseColor = useLoader(\n    TextureLoader,\n    `/textures/${material}_baseColor.jpg`\n  );\n  const normalMap = useLoader(\n    TextureLoader,\n    `/textures/${material}_normal.jpg`\n  );\n  const roughnessMap = useLoader(\n    TextureLoader,\n    `/textures/${material}_occlusionRoughnessMetallic.jpg`\n  );\n\n  const metalTextureColor = useLoader(TextureLoader,  metalColor);\n  const metalRoughnessMap = useLoader(TextureLoader, `/textures/metall_occlusionRoughnessMetallic.jpg`);\n\n  const strapBaseColor = useLoader(TextureLoader, `/textures/strap_baseColor.jpg`);\n  const strapNormalMap = useLoader(TextureLoader, `/textures/strap_normal.jpg`);\n  const strapRoughnessMap = useLoader(TextureLoader, `/textures/strap_occlusionRoughnessMetallic.jpg`);\n\n  console.log(\"glb === \", glb);\n  glb.scene.traverse((child) => {\n  console.log(\"child === \", child.material);\n\n    if (child.isMesh) {\n      child.material.map = baseColor;\n      child.material.normalMap = normalMap;\n      child.material.roughnessMap = roughnessMap;\n\n      if (child.material.name === \"metall\") {\n        child.material.map = metalTextureColor;\n        child.material.roughnessMap = metalRoughnessMap;\n      }\n\n      if (child.material.name === \"strap\") {\n        child.material.map = strapBaseColor;\n        child.material.normalMap = strapNormalMap;\n        child.material.roughnessMap = strapRoughnessMap;\n      }\n\n      child.material.needsUpdate = true;\n    }\n  });\n  glb.materials.body.color.set(bodyColor);\n  glb.materials.strap.color.set(bodyColor);\n\n  glb.scene.position.set(0, 0, 0);\n  glb.scene.scale.set(5, 5, 5);\n\n  return (\n    <primitive\n      object={glb.scene}\n      dispose={null}\n    />\n  );\n}\n\nexport default Backpack;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}