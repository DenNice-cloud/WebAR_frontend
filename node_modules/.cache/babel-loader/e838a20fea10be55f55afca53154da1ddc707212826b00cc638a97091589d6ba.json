{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useTexture } from './useTexture.js';\nconst ImageMaterialImpl = shaderMaterial({\n  color: new THREE.Color('white'),\n  scale: [1, 1],\n  imageBounds: [1, 1],\n  map: null,\n  zoom: 1,\n  grayscale: 0\n}, /* glsl */\n`\n  varying vec2 vUv;\n  void main() {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n    vUv = uv;\n  }\n`, /* glsl */\n`\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\n  varying vec2 vUv;\n  uniform vec2 scale;\n  uniform vec2 imageBounds;\n  uniform vec3 color;\n  uniform sampler2D map;\n  uniform float zoom;\n  uniform float grayscale;\n  const vec3 luma = vec3(.299, 0.587, 0.114);\n  vec4 toGrayscale(vec4 color, float intensity) {\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\n  }\n  vec2 aspect(vec2 size) {\n    return size / min(size.x, size.y);\n  }\n  void main() {\n    vec2 s = aspect(scale);\n    vec2 i = aspect(imageBounds);\n    float rs = s.x / s.y;\n    float ri = i.x / i.y;\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n    vec2 uv = vUv * s / new + offset;\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, 1.0), grayscale);\n    \n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }\n`);\nconst Image = /*#__PURE__*/React.forwardRef(({\n  children,\n  color,\n  segments = 1,\n  scale = 1,\n  zoom = 1,\n  grayscale = 0,\n  url,\n  toneMapped,\n  ...props\n}, ref) => {\n  extend({\n    ImageMaterial: ImageMaterialImpl\n  });\n  const texture = useTexture(url);\n  const planeBounds = Array.isArray(scale) ? [scale[0], scale[1]] : [scale, scale];\n  const imageBounds = [texture.image.width, texture.image.height];\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    scale: scale\n  }, props), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1, segments, segments]\n  }), /*#__PURE__*/React.createElement(\"imageMaterial\", {\n    color: color,\n    map: texture,\n    zoom: zoom,\n    grayscale: grayscale,\n    scale: planeBounds,\n    imageBounds: imageBounds,\n    toneMapped: toneMapped\n  }), children);\n});\nexport { Image };","map":{"version":3,"names":["_extends","React","THREE","extend","shaderMaterial","useTexture","ImageMaterialImpl","color","Color","scale","imageBounds","map","zoom","grayscale","Image","forwardRef","children","segments","url","toneMapped","props","ref","ImageMaterial","texture","planeBounds","Array","isArray","image","width","height","createElement","args"],"sources":["C:/0-Projects/Test/WebAR/WebAR_frontend/node_modules/@react-three/drei/core/Image.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useTexture } from './useTexture.js';\n\nconst ImageMaterialImpl = shaderMaterial({\n  color: new THREE.Color('white'),\n  scale: [1, 1],\n  imageBounds: [1, 1],\n  map: null,\n  zoom: 1,\n  grayscale: 0\n},\n/* glsl */\n`\n  varying vec2 vUv;\n  void main() {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n    vUv = uv;\n  }\n`,\n/* glsl */\n`\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\n  varying vec2 vUv;\n  uniform vec2 scale;\n  uniform vec2 imageBounds;\n  uniform vec3 color;\n  uniform sampler2D map;\n  uniform float zoom;\n  uniform float grayscale;\n  const vec3 luma = vec3(.299, 0.587, 0.114);\n  vec4 toGrayscale(vec4 color, float intensity) {\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\n  }\n  vec2 aspect(vec2 size) {\n    return size / min(size.x, size.y);\n  }\n  void main() {\n    vec2 s = aspect(scale);\n    vec2 i = aspect(imageBounds);\n    float rs = s.x / s.y;\n    float ri = i.x / i.y;\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n    vec2 uv = vUv * s / new + offset;\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, 1.0), grayscale);\n    \n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }\n`);\nconst Image = /*#__PURE__*/React.forwardRef(({\n  children,\n  color,\n  segments = 1,\n  scale = 1,\n  zoom = 1,\n  grayscale = 0,\n  url,\n  toneMapped,\n  ...props\n}, ref) => {\n  extend({\n    ImageMaterial: ImageMaterialImpl\n  });\n  const texture = useTexture(url);\n  const planeBounds = Array.isArray(scale) ? [scale[0], scale[1]] : [scale, scale];\n  const imageBounds = [texture.image.width, texture.image.height];\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    scale: scale\n  }, props), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1, segments, segments]\n  }), /*#__PURE__*/React.createElement(\"imageMaterial\", {\n    color: color,\n    map: texture,\n    zoom: zoom,\n    grayscale: grayscale,\n    scale: planeBounds,\n    imageBounds: imageBounds,\n    toneMapped: toneMapped\n  }), children);\n});\n\nexport { Image };\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SAASC,UAAU,QAAQ,iBAAiB;AAE5C,MAAMC,iBAAiB,GAAGF,cAAc,CAAC;EACvCG,KAAK,EAAE,IAAIL,KAAK,CAACM,KAAK,CAAC,OAAO,CAAC;EAC/BC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACbC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACnBC,GAAG,EAAE,IAAI;EACTC,IAAI,EAAE,CAAC;EACPC,SAAS,EAAE;AACb,CAAC,EACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;AACF,MAAMC,KAAK,GAAG,aAAab,KAAK,CAACc,UAAU,CAAC,CAAC;EAC3CC,QAAQ;EACRT,KAAK;EACLU,QAAQ,GAAG,CAAC;EACZR,KAAK,GAAG,CAAC;EACTG,IAAI,GAAG,CAAC;EACRC,SAAS,GAAG,CAAC;EACbK,GAAG;EACHC,UAAU;EACV,GAAGC;AACL,CAAC,EAAEC,GAAG,KAAK;EACTlB,MAAM,CAAC;IACLmB,aAAa,EAAEhB;EACjB,CAAC,CAAC;EACF,MAAMiB,OAAO,GAAGlB,UAAU,CAACa,GAAG,CAAC;EAC/B,MAAMM,WAAW,GAAGC,KAAK,CAACC,OAAO,CAACjB,KAAK,CAAC,GAAG,CAACA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAACA,KAAK,EAAEA,KAAK,CAAC;EAChF,MAAMC,WAAW,GAAG,CAACa,OAAO,CAACI,KAAK,CAACC,KAAK,EAAEL,OAAO,CAACI,KAAK,CAACE,MAAM,CAAC;EAC/D,OAAO,aAAa5B,KAAK,CAAC6B,aAAa,CAAC,MAAM,EAAE9B,QAAQ,CAAC;IACvDqB,GAAG,EAAEA,GAAG;IACRZ,KAAK,EAAEA;EACT,CAAC,EAAEW,KAAK,CAAC,EAAE,aAAanB,KAAK,CAAC6B,aAAa,CAAC,eAAe,EAAE;IAC3DC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEd,QAAQ,EAAEA,QAAQ;EACjC,CAAC,CAAC,EAAE,aAAahB,KAAK,CAAC6B,aAAa,CAAC,eAAe,EAAE;IACpDvB,KAAK,EAAEA,KAAK;IACZI,GAAG,EAAEY,OAAO;IACZX,IAAI,EAAEA,IAAI;IACVC,SAAS,EAAEA,SAAS;IACpBJ,KAAK,EAAEe,WAAW;IAClBd,WAAW,EAAEA,WAAW;IACxBS,UAAU,EAAEA;EACd,CAAC,CAAC,EAAEH,QAAQ,CAAC;AACf,CAAC,CAAC;AAEF,SAASF,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}